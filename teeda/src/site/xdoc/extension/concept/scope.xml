<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document
	PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN"
	"http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
	<properties>
		<title>Extension - Concept - State and scope</title>
	</properties>
	<body>
		<section name="State and scope">
			<ul>
				<li>
					<a href="#Take state over">Take state over</a>
				</li>
				<li>
					<a href="#Scope">Scope</a>
					<ul>
						<li>
							<a href="#Page scope">Page scope</a>
						</li>
						<li>
							<a href="#Redirect scope">Redirect scope</a>
						</li>
						<li>
							<a href="#Sub-application scope">Sub-application scope</a>
						</li>
						<li>
							<a href="#Default scope">Default scope</a>
						</li>
					</ul>
				</li>
				<li>
					<a href="#Control taking over">Control taking over</a>
					<ul>
						<li>
							<a href="#doFinish method">doFinish～() method</a>
						</li>
						<li>
							<a href="#TakeOver annotation">
								TakeOver annotation
							</a>
						</li>
					</ul>
				</li>
			</ul>
		</section>

		<section name="Take state over">
			<p>
				Teeda Extension transits view using
				<a href="prg.html">PRG Pattern</a>
				. Usually, it needs to take state(the value of properties) when transit view.
			</p>
			<img src="../../images/extension/concept/scope1.png" width="492"
				height="466" alt="Take state over" />
			<p>
				It is not practical to use request parameter because URL has limitation for the length when redirect request. So we use HTTP session, but we have to take care of the life time of the session to save memory cost.
			</p>
			<p>
				Teeda Extension supports to take state over way which has several scope terms. By this function, Application doesn't have to use HTTP session directly, make it possible to take state over Page classes safely and easily. 
			</p>
		</section>

		<section name="Scope">
			<p>Teeda Extensionは次のスコープで状態を管理します．</p>
			<dl>
				<dt>
					<a href="#Page scope">Page scope</a>
				</dt>
				<dd>同じページを表示している間， 状態を維持するスコープです．</dd>
				<dt>
					<a href="#Redirect scope">Redirect scope</a>
				</dt>
				<dd>リダイレクトの間，状態を維持するスコープです．</dd>
				<dt>
					<a href="#Sub-application scope">Sub-application scope</a>
				</dt>
				<dd>
					同じ
					<a href="page.html#サブアプリケーション">
						サブアプリケーション
					</a>
					内のページを表示している間，状態を維持するスコープです．
				</dd>
				<dt>
					<a href="#Default scope">Default scope</a>
				</dt>
				<dd>
					正しくは独立したスコープではなく， Sub-application scopeを利用して状態を引き継ぐスコープです．
				</dd>
			</dl>
			<p>
				次の図は各スコープの有効期間を表しています
				(Default scopeの有効期間はSub-application scopeと同じです)．
			</p>
			<img src="../../images/extension/concept/scope2.png" width="586"
				height="863" alt="スコープの有効期間" />

			<subsection name="Page scope">
				<p>
					Page scopeは，
					<a href="lifecycle.html#ポストバック_自画面表示">
						ポストバック (自画面表示)
					</a>
					や
					<a
						href="lifecycle.html#ポストバック_リダイレクト">
						ポストバック (リダイレクト)
					</a>
					～
					<a href="lifecycle.html#リダイレクト表示">
						リダイレクト表示
					</a>
					で同じページを表示している間維持されるスコープです．
				</p>
				<p>
					Page scopeは，
					<a href="lifecycle.html#初期表示">初期表示</a>
					や
					<a href="lifecycle.html#リダイレクト表示">
						リダイレクト表示
					</a>
					で開始されます．
					<a href="lifecycle.html#初期表示">初期表示</a>
					や
					<a href="lifecycle.html#リダイレクト表示">
						リダイレクト表示
					</a>
					で他のページがリクエストされると破棄されて， 新しいPage scopeが開始されます．
				</p>
				<p>Page scopeを使用するには， ページクラスのプロパティに annotationで明示的に指定します．</p>
				<source><![CDATA[
@PageScope
public String name;
]]></source>
				<p>
					<code>@PageScope</code>
					が指定されたプロパティは， 画面表示の際にPage scopeに含められます．
				</p>
				<div class="caution">
					<div>注意点</div>
					<p>
						<a href="lifecycle.html#初期表示">
							初期表示
						</a>
						で現在と同じページが表示される場合は， Page scopeは維持されません．
						新しいPage scopeが開始されます．
						<a
							href="lifecycle.html#ポストバック_リダイレクト">
							ポストバック (リダイレクト)
						</a>
						で現在と同じページが表示される場合は， Page scopeは維持されます．
					</p>
				</div>
			</subsection>

			<subsection name="Redirect scope">
				<p>
					Redirect scopeは， リダイレクトの間だけ維持されるスコープです．
					入力画面から確認画面に値を引き継ぐ場合などに使うことができます．
				</p>
				<p>
					Redirect scopeは，
					<a
						href="lifecycle.html#ポストバック_リダイレクト">
						ポストバック (リダイレクト)
					</a>
					で開始され，
					<a href="lifecycle.html#リダイレクト表示">
						リダイレクト表示
					</a>
					後に破棄されます．
				</p>
				<p>
					Redirect scopeを使用するには， ページクラスのプロパティに annotationで明示的に指定します．
				</p>
				<source><![CDATA[
@RedirectScope
public String name;
]]></source>
				<p>
					<code>@RedirectScope</code>
					が指定されたプロパティは，
					<a
						href="lifecycle.html#ポストバック_リダイレクト">
						ポストバック (リダイレクト)
					</a>
					の際にRedirect scopeに含められます．
				</p>
			</subsection>

			<subsection name="Sub-application scope">
				<p>
					Sub-application scopeは， 同じ
					<a href="page.html#サブアプリケーション">
						サブアプリケーション
					</a>
					のページを表示している間維持されるスコープです．
				</p>
				<p>
					Sub-application scopeは，
					<a href="lifecycle.html#初期表示">初期表示</a>
					や
					<a href="lifecycle.html#リダイレクト表示">
						リダイレクト表示
					</a>
					で 他の
					<a href="page.html#サブアプリケーション">
						サブアプリケーション
					</a>
					から遷移した際に開始されます．
					<a href="lifecycle.html#初期表示">初期表示</a>
					や
					<a href="lifecycle.html#リダイレクト表示">
						リダイレクト表示
					</a>
					で他のサブアプリケーションのページが要求されると破棄されて，
					新しいSub-application scopeが開始されます．
				</p>
				<p>
					Sub-application scopeを使用するには，
					ページクラスのプロパティに annotationで明示的に指定します．
				</p>
				<source><![CDATA[
@SubapplicationScope
public String name;
]]></source>
				<p>
					<code>@SubapplicationScope</code>
					が指定されたプロパティは， 画面表示の際にSub-application scopeに含められます．
				</p>
			</subsection>

			<subsection name="Default scope">
				<p>Default scopeは，実際にはスコープではなく，Sub-application scopeの一種です．</p>
				<p>
					<a
						href="lifecycle.html#ポストバック_リダイレクト">
						ポストバック (リダイレクト)
					</a>
					の際に， annotationが指定されていないプロパティで，
					<strong>次画面のページクラスと共通のプロパティ</strong>
					は， 自動的にSub-application scopeに含められて次画面に引き継がれます．
					これがDefault scopeです．
				</p>
				<p>
					Default scopeを使用するには，
					ページクラスのプロパティにスコープの annotationを指定する必要はありません．
				</p>
				<source><![CDATA[
public String name;
]]></source>
				<p>
					Default scopeのプロパティは，
					<a
						href="lifecycle.html#ポストバック_リダイレクト">
						ポストバック (リダイレクト)
					</a>
					の際にSub-application scopeに含められます．
				</p>
				<div class="caution">
					<div>注意点</div>
					<p>
						Default scopeのプロパティは，
						<a href="lifecycle.html#初期表示">
							初期表示
						</a>
						や
						<a
							href="lifecycle.html#ポストバック_自画面表示">
							ポストバック (自画面表示)
						</a>
						ではSub-application scopeに含められません．
						次画面のページクラスにないプロパティもSub-application scopeに含められません．
						これらの点がSub-application scopeと異なる点です．
					</p>
				</div>
			</subsection>
		</section>

		<section name="Control taking over">
			<p>
				デフォルトでは， 遷移元ページと遷移先ページで共通のプロパティは
				<strong>全て</strong>
				引継ぎの対象となりますが， プロパティの一部または全部を引き継がないようにすることも可能です．
			</p>

			<subsection name="doFinish～() method">
				<p>
					サブミットボタンの
					<code>id</code>
					属性および対応する
					<a href="lifecycle.html#ライフサイクル method">
						ライフサイクル method
					</a>
					の名前が
					<code>doFinish</code>
					または
					<code>doOnceFinish</code>
					で始まっている場合，
					<a href="page.html#ポストバック">ポストバック</a>
					された際にSub-application scope (Default scope含む) の内容はクリアされ，
					遷移先画面に状態は引き継がれなくなります (Redirect scopeは引き継がれます)．
				</p>
			</subsection>

			<subsection name="TakeOver annotation">
				<p>
					<a href="lifecycle.html#ライフサイクル method">
						ライフサイクル method
					</a>
					に
					<code>@TakeOver</code>
					 annotationを指定することで， 遷移先画面に引き継ぐプロパティをきめ細かく指定することができます．
				</p>
				<p>
					<code>@TakeOver</code>
					 annotationでは，
					<code>type</code>
					属性でプロパティを引き継ぐ方法を次の3種類から指定します．
				</p>
				<dl>
					<dt>
						<code>INCLUDE</code>
					</dt>
					<dd>
						<code>properties</code>
						属性で指定したプロパティだけを遷移先画面に引き継ぎます．
					</dd>
					<dt>
						<code>EXCLUDE</code>
					</dt>
					<dd>
						<code>properties</code>
						属性で指定したプロパティを除いたプロパティだけを遷移先画面に引き継ぎます．
					</dd>
					<dt>
						<code>NEVER</code>
					</dt>
					<dd>全てのプロパティを遷移先画面に引き継ぎません．</dd>
				</dl>
				<p>次の例では，</p>
				<ul>
					<li>
						<code>doXxx()</code>
						 methodは，
						<code>foo</code>
						および
						<code>bar</code>
						プロパティのみを遷移先画面に引き継ぎます．
					</li>
					<li>
						<code>doYyy()</code>
						 methodは，
						<code>foo</code>
						および
						<code>bar</code>
						を除いたプロパティのみを遷移先画面に引き継ぎます．
					</li>
					<li>
						<code>doZzz()</code>
						 methodは，全てのプロパティを遷移先画面に引き継ぎません．
					</li>
				</ul>
				<source><![CDATA[
@TakeOver(type = TakeOverType.INCLUDE, properties = "foo, bar")
public Class doXxx() {
    ...
}

@TakeOver(type = TakeOverType.EXCLUDE, properties = "foo, bar")
public Class doYyy() {
    ...
}

@TakeOver(type = TakeOverType.NEVER)
public Class doZzz() {
    ...
}
]]></source>
			</subsection>
		</section>
	</body>
</document>
