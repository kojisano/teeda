<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document
	PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN"
	"http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
	<properties>
		<title>Extension - Concept - State and scope</title>
	</properties>
	<body>
		<section name="State and scope">
			<ul>
				<li>
					<a href="#Take state over">Take state over</a>
				</li>
				<li>
					<a href="#Scope">Scope</a>
					<ul>
						<li>
							<a href="#Page scope">Page scope</a>
						</li>
						<li>
							<a href="#Redirect scope">Redirect scope</a>
						</li>
						<li>
							<a href="#Sub-application scope">Sub-application scope</a>
						</li>
						<li>
							<a href="#Default scope">Default scope</a>
						</li>
					</ul>
				</li>
				<li>
					<a href="#Control taking over">Control taking over</a>
					<ul>
						<li>
							<a href="#doFinish method">doFinish～() method</a>
						</li>
						<li>
							<a href="#TakeOver annotation">
								TakeOver annotation
							</a>
						</li>
					</ul>
				</li>
			</ul>
		</section>

		<section name="Take state over">
			<p>
				Teeda Extension transits view using
				<a href="prg.html">PRG Pattern</a>
				. Usually, it needs to take state(the value of properties) when transit view.
			</p>
			<img src="../../images/extension/concept/scope1.png" width="492"
				height="466" alt="Take state over" />
			<p>
				It is not practical to use request parameter because URL has limitation for the length when redirect request. So we use HTTP session, but we have to take care of the life time of the session to save memory cost.
			</p>
			<p>
				Teeda Extension supports to take state over way which has several scope terms. By this function, Application doesn't have to use HTTP session directly, make it possible to take state over Page classes safely and easily. 
			</p>
		</section>

		<section name="Scope">
			<p>Teeda Extension manages state by various scopes below</p>
			<dl>
				<dt>
					<a href="#Page scope">Page scope</a>
				</dt>
				<dd>It keeps states while showing same Page.</dd>
				<dt>
					<a href="#Redirect scope">Redirect scope</a>
				</dt>
				<dd>It keeps states while redirect to other Page.</dd>
				<dt>
					<a href="#Sub-application scope">Sub-application scope</a>
				</dt>
				<dd>
					It keeps states while showing Pages in same
					<a href="page.html#Sub application">
						Sub-application
					</a>.
				</dd>
				<dt>
					<a href="#Default scope">Default scope</a>
				</dt>
				<dd>
					It is not independent scope but uses Sub-application scope for keeping states.
				</dd>
			</dl>
			<p>
				The figure below shows life time of the each scopes
				(life time of Default scope is as same ase Sub-application scope)．
			</p>
			<img src="../../images/extension/concept/scope2.png" width="586"
				height="863" alt="Life time of the each scopes" />

			<subsection name="Page scope">
				<p>
					Page scope keeps states while showing same Page in
					<a href="lifecycle.html#Post back_show self view">
						Post back (Show self view)
					</a>
					,
					<a
						href="lifecycle.html#Post back_Redirect">
						Post back (Redirect)
					</a>
					,
					<a href="lifecycle.html#Redirect show">
						Redirect show
					</a>.
				</p>
				<p>
					Page scope is started in
					<a href="lifecycle.html#Initial view">Initial view</a>
					, and 
					<a href="lifecycle.html#Redirect show">
						Redirect show
					</a>
					. The state will be deleted in
					<a href="lifecycle.html#Initial view">Initial view</a>
					, and when the other page is requested by
					<a href="lifecycle.html#Redirect show">
						Redirect show
					</a>
					, new Page scope will be started.
				</p>
				<p>If you want to use Page scope, you define annotation for the Page properties as below:</p>
				<source><![CDATA[
@PageScope
public String name;
]]></source>
or
				<source><![CDATA[
public static final String PAGE_SCOPE = "name";
public String name;
]]></source>
2nd definition way is called as "Static value annotation". It is for the project that is for Java1.4.
				<p>
				        Properties that have
					<code>@PageScope</code>
					annotation will be included in Page scope when showing the view.
				</p>
				<div class="caution">
					<div>Caution</div>
					<p>
					        Page scope will be cleared when showing the same view as
						<a href="lifecycle.html#Initial view">
							Initial view
						</a>.
						Teeda starts new Page scope.
						In case of that showing the same view (with current view) by
						<a
							href="lifecycle.html#Post back_Redirect">
							Post back (Redirect)
						</a>
						, Teeda keeps the Page scope.
					</p>
				</div>
			</subsection>

			<subsection name="Redirect scope">
				<p>
					Redirect scope keeps the states only while Redirect.
					It is used for taking over values from input view to confirm view.
				</p>
				<p>
					Redirect scope is started in 
					<a
						href="lifecycle.html#Post back_Redirect">
						Post back (Redirect)
					</a>
					, will be disposed after 
					<a href="lifecycle.html#Redirect show">
						Redirect show
					</a>.
				</p>
				<p>
					If you want to use Redirect scope, you have to define annotation for the Page properties.
				</p>
				<source><![CDATA[
@RedirectScope
public String name;
]]></source>
				<source><![CDATA[
public static final String REDIRECT_SCOPE = "name";
public String name;
]]></source>
2nd definition way is called as "Static value annotation". It is for the project that is for Java1.4.
				<p>
				        The properties having 
					<code>@RedirectScope</code>
					is included in Redirect scope when 
					<a
						href="lifecycle.html#Post back_Redirect">
						Post back (Redirect)
					</a>.
				</p>
			</subsection>

			<subsection name="Sub-application scope">
				<p>
					Sub-application scope keeps states while showin the same
					<a href="page.html#Sub application">
						Sub application
					</a>
					.
				</p>
				<p>
					Sub-application scope is startd in 
					<a href="lifecycle.html#Initial view">Initial view</a>
					, or 
					<a href="lifecycle.html#Redirect show">
						Redirect show
					</a>
					when it is transitted from other 
					<a href="page.html#Sub application">
						Sub application
					</a>
					.
					It will be deleted when new Sub application page is requested in
					<a href="lifecycle.html#Initial view">Initial view</a>
					 or 
					<a href="lifecycle.html#Redirect show">
						Redirect show
					</a>
					and start new Sub application scope.
				</p>
				<p>
					If you want to use Sub application scope, you have to define annotation for Page properties.
				</p>
				<source><![CDATA[
@SubapplicationScope
public String name;
]]></source>
				<source><![CDATA[
public static final String SUBAPPLICATION_SCOPE = "name";
public String name;
]]></source>
2nd definition way is called as "Static value annotation". It is for the project that is for Java1.4.
				<p>
				        The properties having
					<code>@SubapplicationScope</code>
					is inluded in Sub application scope when showing the Page.
				</p>
			</subsection>

			<subsection name="Default scope">
				<p>Default scope is not an independent scope type but a kind of Sub application scope.</p>
				<p>
				       When 
					<a
						href="lifecycle.html#Post back_Redirect">
						Post back (Redirect)
					</a>
					, the properties which have no annotation and are <strong>common properties with next Page</strong>
					are automatically taken over to next Page included in Sub application scope.
					This is Default scope.
				</p>
				<p>
					For using Default scope, there is no need to define annotation for Page properties.
				</p>
				<source><![CDATA[
public String name;
]]></source>
				<p>
					The properties in Default scope are included in Sub application scope when
					<a
						href="lifecycle.html#Post back_Redirect">
						Post back (Redirect)
					</a>
					.
				</p>
				<div class="caution">
					<div>Caution</div>
					<p>
						The properties in Default scope are not included in Sub application scope
						when 
						<a href="lifecycle.html#Initial view">
							Initial view
						</a>
						and 
						<a
							href="lifecycle.html#Post back_show self view">
							Post back(Show self view)
						</a>
						.
						The properties whose name is not in next Page are not included in Sub application scope.
						Those points are different from Sub application scope.
					</p>
				</div>
			</subsection>
		</section>

		<section name="Control taking over">
			<p>
				By default, <strong>all</strong> properties whose are common in tha pege that is transition start
				and the page that is transition destination.
				It is possible not to include the part of properties or all properties.
			</p>

			<subsection name="doFinish～() method">
				<p>
					If 
					<code>id</code> attribute of the submit button and related name of 
					<a href="lifecycle.html#Lifecycle method">
						Lifecycle method
					</a>
					starts from 
					<code>doFinish</code>
					or
					<code>doOnceFinish</code>
					and they are executed as 
					<a href="page.html#Post back">Post back</a>
					, the states of Sub application scope (includes Default scope) will be deleted,
					they are not taken over to next Page. (Only Redirect scope is taken over.)．
				</p>
			</subsection>

			<subsection name="TakeOver annotation">
				<p>
				        By defining 
					<code>@TakeOver</code> annotation to 
					<a href="lifecycle.html#Lifecycle method">
						Lifecycle method
					</a>
					, it is possible to limit the properties to take over next Page.
				</p>
				<p>
				        When using
					<code>@TakeOver</code>
					 annotation, you can choose 1 of 3 types how to take over the properties using
					<code>type</code>
					 attribute.
				</p>
				<dl>
					<dt>
						<code>INCLUDE</code>
					</dt>
					<dd>
					        Take only properties that is defined by 
						<code>properties</code>
						attribute over to next Page.
					</dd>
					<dt>
						<code>EXCLUDE</code>
					</dt>
					<dd>
						Take properties that is not defined by
						<code>properties</code> attribute over to next Page.
					</dd>
					<dt>
						<code>NEVER</code>
					</dt>
					<dd>Don't take all properties over to next Page</dd>
				</dl>
				<p>The example below is showing that</p>
				<ul>
					<li>
						<code>doXxx()</code>
						 method takes
						<code>foo</code>
						and
						<code>bar</code>
						property to next Page.
					</li>
					<li>
						<code>doYyy()</code>
						 method takes all properties excluding
						<code>foo</code>
						and
						<code>bar</code>
						over to next Page.
					</li>
					<li>
						<code>doZzz()</code>
						 method doesn't take all properties over to next Page.
					</li>
				</ul>
				<source><![CDATA[
@TakeOver(type = TakeOverType.INCLUDE, properties = "foo, bar")
public Class doXxx() {
    ...
}

@TakeOver(type = TakeOverType.EXCLUDE, properties = "foo, bar")
public Class doYyy() {
    ...
}

@TakeOver(type = TakeOverType.NEVER)
public Class doZzz() {
    ...
}
]]></source>
			</subsection>
		</section>
	</body>
</document>
