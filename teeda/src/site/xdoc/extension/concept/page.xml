<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document
	PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN"
	"http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
	<properties>
		<title>Extension - Concept - Page model</title>
	</properties>
	<body>
		<section name="Page model">
			<ul>
				<li>
					<a href="#Abstracts">Abstracts</a>
				</li>
				<li>
					<a href="#Template HTML">Template HTML</a>
				</li>
				<li>
					<a href="#Page class">Page class</a>
				</li>
				<li>
					<a href="#Rendering">Rendering</a>
				</li>
				<li>
					<a href="#Post back">Post back</a>
				</li>
				<li>
					<a href="#Sub application">Sub application</a>
				</li>
				<li>
					<a href="#Naming convention">Naming convention</a>
					<ul>
						<li>
							<a href="#Naming convention of Template HTML">
								Naming convention of Template HTML
							</a>
						</li>
						<li>
							<a href="#Naming convention of Page class">
								Naming convention of Page class
							</a>
						</li>
						<li>
							<a href="#Naming convention of Page name">
								Naming convention of Page name
							</a>
						</li>
					</ul>
				</li>
			</ul>
		</section>

		<section name="Abstracts">
			<div class="sidebar">You can use both Page class and Action class (e.g. Logic class, Service class)</div>
			<p>Teeda Extension is presentation framework based on Page model.</p>
			<p>
				A page is consisted of a static template HTML and a Page class that has dynamic information.
				The template HTML and the page class is one by one.
			</p>
			<img src="../../images/extension/concept/page1.png"
				width="466" height="183" alt="Page model" />
		</section>

		<section name="Template HTML">
			<p>Teeda Extension uses HTML (XHTML, correctly) not JSP.</p>
			<p>
<!--
				テンプレートHTMLは， ブラウザに向けてレンダリングされるHTMLのひな形で，
				主にid属性を使用して実行時に置き換える部分を示します．
-->
				The template HTML is the template for Web browsers,
				showing dynamic properties by using id attributes mainly.
			</p>
			<h5>Template HTML example.</h5>
			<source><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  </head>
  <body>
    name <span id="name">dummy</span>
  </body>
</html>
]]></source>
			<p>
				In above template HTML, 
				<code>&lt;span&gt;</code>
				element has id named as 
				<code>"name"</code>.
			</p>
		</section>

		<section name="Page class">
			<p>Page class has information for template HTML.</p>
			<p>
<!--
				ページクラスはPOJO(Plain Old Java Object)であり，
				特定のクラスを継承したり，インタフェースを実装したりする必要はありません．
-->
				Page class is POJO(Plain Old Java Object), you don't have to extend specific class or implement specific interface.
			</p>
			<p>
<!--				ページクラスは動的な情報をプロパティに保持します．
				getter/setterメソッドを使うJavaBeans流のプロパティだけでなく，
				publicフィールドもプロパティとして利用可能です．-->
				Page class sets dynamic information into its properties.
				Not only getter/setter property, but also public field of the Page class is available.
			</p>
			<h5>Example of Page class</h5>
			<source><![CDATA[
public class HelloPage {
    public String name ="ABC";
}
]]></source>
			<p>
				Above page class defines
				<code>name</code>
				 property.
			</p>
		</section>

		<section name="Rendering">
			<p>
				When showing the pages, the dynamic parts of template HTML are replaced with the properties of Page class
				and rendered for Web browsers.
			</p>
			<img src="../../images/extension/concept/page2.png"
				width="466" height="391" alt="Rendering" />
			<p>
				After the dynamic part of the template HTML above is replaced with the property of the page class, it will be rendered as below.
			</p>
			<source><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  </head>
  <body>
    name <span id="name">ABC</span>
  </body>
</html>
]]></source>
			<p>
<!--				テンプレートHTMLのid属性とページクラスのプロパティは規約によって結びつけられるため，
				明示的に指定をする必要はありません．-->
				The id attributes of template HTML and properties of Page class are linked by the convention,
				you don't have to write configuration.
			</p>
		</section>

		<section name="Post back">
			<p>
				Template HTML can have
				<code>&lt;form&gt;</code>.
				On Teeda Extension, when 
				<code>&lt;form&gt;</code>
				is submitted, the target(action) is always the page itself.
			</p>
			<img src="../../images/extension/concept/page3.png"
				width="466" height="429" alt="Post back" />
			<p>
				As like this, it is called
				<strong>Post back</strong> that the page is shown again after
				<code>&lt;form&gt;</code>
				is submitted.
			</p>
			<div class="caution">
				<div>Caution</div>
				<p>
<!--
					Teeda Extensionでは，HTTPプロトコルのPOSTメソッドはポストバックでのみ使用します．
					また，ポストバックは常にPOSTメソッドを使用します．
-->
					On Teeda Extension, HTTP protocol's POST method is only used by Post back.
					And Post back always uses POST method.
				</p>
			</div>
		</section>

		<section name="Sub application">
			<p>"Sub application" consists of the pages under same directory(package).</p>
			<p>
<!--
				入力画面・確認画面・完了画面のように，
				一連のインタラクションを構成する複数のページを同じサブアプリケーションに含めることにより，
				状態の引継ぎが容易になります． 詳細は「
				<a href="scope.html">状態とスコープ</a>
				」を参照してください．
-->
				By including some pages that carry out series of an interaction(e.g. Input view, confirm input view, finish view),
				taking over the states can be easy. Detail is in
				<a href="scope.html">State and scope</a>
				.
			</p>
		</section>

		<section name="Naming convention">
			<div class="sidebar">
				About SMART deploy, refer Seasar2's
				<a
					href="http://s2container.seasar.org/2.4/ja/DIContainer.html">
					"DIContainer"
				</a>
				－
				<a
					href="http://s2container.seasar.org/2.4/ja/DIContainer.html#SMARTdeploy">
					"SAMRT deploy"
				</a>
			</div>
			<p>
				Teeda Extension is based on
				<a href="http://s2container.seasar.org/2.4/ja/">
					Seasar2
				</a>
				's SMART deploy
			</p>
			<p>
<!--				テンプレートHTML及びページクラスをSMART deployの規約に従って配置することで，
				面倒な設定が不要となっています．-->
				By deploying template HTML and Page class based on the convention of SMART deploy,
				bothering configuration is unnecessary.
			</p>

			<subsection name="Naming convention of Template HTML">
				<p>
					Template HTML is deployed under sub application's directory under
					<var>view root</var>
					directory. Default
					<var>view root</var>
					directory is
					<code>/view</code>
					.
				</p>
				<p>
					First character of name of Template HTML has to be small capital. Default extension is
					<code>.html</code>
					.
				</p>
				<p>Below is example of Template HTML's path</p>
				<source><![CDATA[
/view/hello/hello.html
]]></source>
				<p>URL for accesing this URL is below.</p>
				<source><![CDATA[
http://localhost:8080/teeda-html-example/view/hello/hello.html
]]></source>
				<div class="caution">
					<div>Caution</div>
					<p>
						You can't include
						<code>'_'</code>
						in HTML file name.
					</p>
				</div>
			</subsection>

			<subsection name="ページクラスの命名規約">
				<p>
					ページクラスは，
					&lt;ルートパッケージ&gt;.&lt;サブアプリケーションルートパッケージ&gt;の下に，
					サブアプリケーション単位のサブパッケージを作成して配置します． デフォルトの
					&lt;サブアプリケーションルートパッケージ&gt;は
					<code>web</code>
					です．
				</p>
				<p>
					ページクラスの名前は，テンプレートHTMLファイルの名前の先頭を大文字にし，
					拡張子を取り除いて接尾辞を付加したものにします． デフォルトの接尾辞は
					<code>Page</code>
					です．
				</p>
				<p>
					以下は，
					<code>/view/hello/hello.html</code>
					に対応するページクラスの例です．
				</p>
				<source><![CDATA[
examples.teeda.web.hello.HelloPage
]]></source>
				<p>
					この例では，
					<code>examples.teeda</code>
					がルートパッケージです．
				</p>
				<div class="caution">
					<div>注意点</div>
					<p>
						ページクラス名にアンダースコア (
						<code>'_'</code>
						) を含めることはできません．
					</p>
				</div>
			</subsection>

			<subsection name="ページ名の命名規約">
				<p>
					ページを表す名前は，
					<var>ビュールート</var>
					ディレクトリを基点として，
					サブアプリケーション単位のサブディレクトリとページクラスの名前をアンダースコア
					<code>'_'</code>
					でつなげたものです．
					ただし，サブディレクトリおよびページクラスはJavaBeansにおけるプロパティの規約に従い，
					先頭を小文字にします (先頭の文字と2文字目がともに大文字の場合はそのまま)．
				</p>
				<p>
					以下は，
					<code>/view/hello/hello.html</code>
					に対応するページ名の例です．
				</p>
				<source><![CDATA[
hello_helloPage
]]></source>
			</subsection>
		</section>
	</body>
</document>
